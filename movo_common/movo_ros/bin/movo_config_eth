#!/usr/bin/env python
"""--------------------------------------------------------------------
Copyright (c) 2017, Kinova Robotics inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of the copyright holder nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.
      
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 \file   movo_config_eth

 \brief  configures the platform ethernet for operation

 \Platform: Ubuntu 16.04 LTS / ROS Kinetic
--------------------------------------------------------------------"""
import socket
import argparse
import os
import time
from movo.utils import dottedQuadToNum,generate_cmd_bytes,validate_response
import movo.crc16 as crc16
from movo.system_defines import *

def validate_ipv4(argument,name):
    """
    Each address must have 4 
    """
    if len(argument.split(".")) != 4:
        print("Invalid %s, must be of the form xxx.yyy.zzz.www" % name)
        exit(-1)
    for x in argument.split("."):
        if len(x) > 3:
            print("Invalid %s, must be of the form xxx.yyy.zzz.www" % name)
            exit(-1)
        if int(x) > 255:
            print("Invalid %s, octects must be less than 255" % name)
            exit(-1)

def parse_hokuyo_ipv4(argument, name):
    """
    Each address must have 4 
    """
    validate_ipv4(argument, name)
    
    parsed = ""
    for x in argument.split("."):
        while len(x) < 3:
            x = "0" + x
        parsed += x
    return parsed

def parse_movo_rsp(rsp,new_settings):
    
    data = [ord(i) for i in rsp]
    
    
    
    valid_rsp,rsp_data = validate_response(data,len(data))
    
    if not valid_rsp:
        return False
    print new_settings,rsp_data[ROS_FRAM_ETH_IP_ADDRESS_INDEX:]
    for i in range(len(new_settings)):
        print new_settings[i],rsp_data[ROS_FRAM_ETH_IP_ADDRESS_INDEX+i]
        if new_settings[i] != rsp_data[ROS_FRAM_ETH_IP_ADDRESS_INDEX+i]:
            valid_rsp = False
            break
    return valid_rsp

if __name__ == "__main__":


    
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--movo_settings', help='The desired ethernet settings for the movo platform',
                        default=['192.168.0.40',['10.66.171.5','255.255.255.0','10.66.171.1']])
    parser.add_argument('--update_hokuyo', help='The desired IP address for the laser', default=False)
    parser.add_argument('--hokuyo_settings', help='The desired ethernet settings for the hokuyo laser',
                        default=['192.168.0.10',['10.66.171.6','255.255.255.0','10.66.171.1']])
    
    args = parser.parse_args()
    
    validate_ipv4(args.movo_settings[0],"Present Movo IP")
    validate_ipv4(args.movo_settings[1][0],"New Movo IP")
    validate_ipv4(args.movo_settings[1][1],"Present Movo Subnet")
    validate_ipv4(args.movo_settings[1][2],"New Movo Gateway")

    if (args.update_hokuyo):
        ip = parse_hokuyo_ipv4(args.hokuyo_settings[1][0],"New hokuyo IP")
        gw = parse_hokuyo_ipv4(args.hokuyo_settings[1][1],"Present hokuyo Subnet")
        nm = parse_hokuyo_ipv4(args.hokuyo_settings[1][2],"New hokuyo Gateway")

    """
    First kill the movo core process
    """
    print "Shutting down the movo-core service"
    os.system("sudo service movo-core status")
    
    """
    Initialize the CRC table incase it hasn't been yet
    """
    crc16.generate_crc_table()
    
    print("Connecting to Movo platform %s" % args.movo_settings[0])
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.connect((args.movo_settings[0],8080))
    
    set_continuous = [GENERAL_PURPOSE_CMD_ID,[GENERAL_PURPOSE_CMD_SEND_CONTINUOUS_DATA,0]]
    cmd_bytes = generate_cmd_bytes(set_continuous)
    cmd_str = ''.join([chr(i) for i in cmd_bytes])
    sock.send(cmd_str)
    time.sleep(0.5)
    sock.send(cmd_str)
    
    start_time = time.clock()
    platform_streaming = True
    try:
        while (time.clock() - start_time) < 2.0:
            sock.settimeout(0.1)
            returned = sock.recv(40)
    except socket.timeout:
        platform_streaming = False
        
    if (True == platform_streaming):
        print "Could not stop platform stream"
        sock.close()
        exit(-1)
    
    new_settings = [LOAD_ETH_CONFIG_CMD_ID,
                    [dottedQuadToNum(args.movo_settings[1][0]),
                     8080,
                     dottedQuadToNum(args.movo_settings[1][1]),
                     dottedQuadToNum(args.movo_settings[1][2])]]
    cmd_bytes = generate_cmd_bytes(new_settings)
    cmd_str = ''.join([chr(i) for i in cmd_bytes])
    
    print "Updating Movo ethernet settings"
    
    sock.send(cmd_str)
    cmd_none = [GENERAL_PURPOSE_CMD_ID,[GENERAL_PURPOSE_CMD_NONE,0]]
    cmd_bytes = generate_cmd_bytes(cmd_none)
    cmd_str = ''.join([chr(i) for i in cmd_bytes])  
    valid_settings = False
    attemps = 0
    while (attemps < 10) and not valid_settings:
        try:
            sock.settimeout(0.04)
            returned = sock.recv(NUMBER_OF_MOVO_RSP_WORDS)
            valid_settings = parse_movo_rsp(returned,new_settings[1])
            sock.send(cmd_str)
        except socket.timeout:
            attemps += 10
    sock.close()
    if not valid_settings:
        print("Movo platform does not appear to have updated")
        exit(-1)
    
    print ("Movo platform has been updated")
    
    if (args.update_hokuyo):
        msg = "$IP" + ip + nm + gw + chr(0x0a)
        
        print("Connecting to laser: %s" % args.hokuyo_settings[0])
        sock = socket.socket()
        sock.connect((args.hokuyo_settings[0], 10940))

        print("Updating settings")
        sock.send(msg)
        try:
            sock.settimeout(5)
            returned = sock.recv(40)
        except socket.timeout:
            print("Laser did not return any packet, is probably not updated.")
            sock.close()
            exit(-1)
        if msg != returned:
            print("Laser does not appear to have updated")
            sock.close()
            exit(-1)
            
        print("Done updating, Rebooting the laser")
        msg = "RB."
        sock.send(msg)
        try:
            sock.settimeout(5)
            returned = sock.recv(40)
        except socket.timeout:
            print("Laser does not appear to acknowledge reboot, please cycle power")
            sock.close()
            exit(-1)
        if "RB.01Q.." != returned:
            print("Laser does not appear to acknowledge reboot, please cycle power")
            sock.close()
            exit(-1)

        sock.send(msg)
        try:
            sock.settimeout(5)
            returned = sock.recv(40)
        except socket.timeout:
            print("Laser does not appear to acknowledge reboot, please cycle power")
            sock.close()
            exit(-1)
        if "RB.00P.." != returned:
            print("Laser does not appear to acknowledge reboot, please cycle power")
            sock.close()
            exit(-1)
        

    print "Please udpate the settings in the 50.movo_env.sh file that gets sources by workspace or by ros package"        












