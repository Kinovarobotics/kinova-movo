#!/usr/bin/env python
"""--------------------------------------------------------------------
Copyright (c) 2017, Kinova Robotics inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright notice,
	  this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright notice,
	  this list of conditions and the following disclaimer in the documentation
	  and/or other materials provided with the distribution.
	* Neither the name of the copyright holder nor the names of its contributors
	  may be used to endorse or promote products derived from this software
	  without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 \file   init_robot

 \brief  Initialize robot 

 \Platform: Linux/ROS Indigo
--------------------------------------------------------------------"""
import sys, rospy
from std_msgs.msg import Bool
from moveit_python import MoveGroupInterface
from moveit_msgs.msg import MoveItErrorCodes
from movo_action_clients.gripper_action_client import GripperActionClient
import moveit_commander

if __name__ == "__main__":
	rospy.init_node('init_robot')
	#moveit_commander.roscpp_initialize(sys.argv)

	move_group = MoveGroupInterface("upper_body","base_link")
	move_group.setPlannerId("RRTConnectkConfigDefault")
	lgripper = GripperActionClient('left')
	rgripper = GripperActionClient('right')
	dof = rospy.get_param('~jaco_dof')

	if ("6dof" == dof):
		#move_group = MoveGroupInterface("upper_body","base_link")
		#move_group.setPlannerId("RRTConnectkConfigDefault")
		upper_body_joints = ["right_elbow_joint",
							"right_shoulder_lift_joint",
							"right_shoulder_pan_joint",
							"right_wrist_1_joint",
							"right_wrist_2_joint",
							"right_wrist_3_joint",
							"left_elbow_joint",
							"left_shoulder_lift_joint",
							"left_shoulder_pan_joint",
							"left_wrist_1_joint",
							"left_wrist_2_joint",
							"left_wrist_3_joint",
							"linear_joint",
							"pan_joint",
							"tilt_joint"]
		homed = [-2.135,-0.227,-1.478,-2.083,1.445,1.321,2.135,0.227,1.478,2.083,-1.445,-1.321,0.35,0.0,0.0]
		tucked = [-2.8,-1.48,-1.48,0,0,1.571, 2.8,1.48,1.48,0,0,-1.571,0.0371,0.0,0.0]

	elif ("7dof" == dof):
		#move_group = moveit_commander.MoveGroupCommander("upper_body")
		#move_group.set_planner_id("RRTConnectkConfigDefault")

		upper_body_joints = ["right_shoulder_pan_joint",
							"right_shoulder_lift_joint",
							"right_arm_half_joint",
							"right_elbow_joint",
							"right_wrist_spherical_1_joint",
							"right_wrist_spherical_2_joint",
							"right_wrist_3_joint",
							"left_shoulder_pan_joint",
							"left_shoulder_lift_joint",
							"left_arm_half_joint",
							"left_elbow_joint",
							"left_wrist_spherical_1_joint",
							"left_wrist_spherical_2_joint",
							"left_wrist_3_joint",
							"linear_joint",
							"pan_joint",
							"tilt_joint"]

		homed = [-1.5,-0.2,-0.15,-2.0,2.0,-1.24,-1.1, 1.5,0.2,0.15,2.0,-2.0,1.24,1.1,0.35,0,0]

		grasp = [-2.6,  2.0, 0.0,  2.0, 0.0, 0.0,  1.0, 2.6, -2.0, 0.0, -2.0, 0.0, 0.0, -1.0, 0.371, 0,0]

		tucked = [-1.6,-1.5,0.4,-2.7,0.0,0.5, -1.7,1.6,1.5,-0.4,2.7,0.0,-0.5, 1.7, 0.04, 0, 0]

		#homed = [ -1.57, 0.0, 0.0,  2.2, 1.8, -1.5, -1.0, 1.57, 0.0, 0.0, -2.2,-1.8,  1.5,  1.0, 0.35, 0, 0]
		#tucked = [ -1.57, -1.46, -3.0, -2.7, -0.2,-0.5, -1.2, 1.57, 1.46,  3.0,  2.7,  0.2, 0.5,  1.2, 0.04, 0, 0]

	else:
		rospy.logerr("DoF needs to be set 6 or 7, aborting process")
		exit()

	# This is a hardware so need to adjust gripper parameters
	gripper_closed = 0.01
	gripper_open = 0.165

	lgripper.command(gripper_closed)
	rgripper.command(gripper_closed)

	success=False
	while not rospy.is_shutdown() and not success:
		"""
		if "6dof" == dof:
			result = move_group.moveToJointPosition(upper_body_joints, homed, 0.05)
			if result.error_code.val == MoveItErrorCodes.SUCCESS:
				success=True

		if "7dof" == dof:
			move_group.set_named_target("homed")
			plan = move_group.plan()
			move_group.execute(plan)
        """

		rospy.logerr("++++++++++++ Going to homed")
		result = move_group.moveToJointPosition(upper_body_joints, homed, 0.05)
		rospy.logerr("++++++++++++ After homed")
		if result.error_code.val == MoveItErrorCodes.SUCCESS:
			success = True
		else:
			rospy.logerr("++++++++++++ moveToJointPosition failed (%d)" %result.error_code.val)

	"""
	rospy.sleep(2.0)
	home_arm_pub = rospy.Publisher('/movo/home_arms', Bool, queue_size=1)
	success=Bool(False)
	home_arm = Bool(True)
	while not success.data:
		home_arm_pub.publish(home_arm)
		rospy.logerr("++++++++++++ waiting /movo/arms_are_homed...")
		try:
			success = rospy.wait_for_message('/movo/arms_are_homed', Bool, timeout=10.0)
		except:
			pass

	rospy.logerr("++++++++++++ Obtained /movo/arms_are_homed...")
	"""
	rospy.sleep(5)
	success=False
	while not rospy.is_shutdown() and not success:
		"""
		if "6dof" == dof:
		    result = move_group.moveToJointPosition(upper_body_joints, tucked, 0.05)
		    if result.error_code.val == MoveItErrorCodes.SUCCESS:
			    success=True
			    
		if "7dof" == dof:
			move_group.set_named_target("tucked")
			plan = move_group.plan()
			move_group.execute(plan)
        """
		rospy.logerr("++++++++++++ Going to tucked")
		result = move_group.moveToJointPosition(upper_body_joints, tucked, 0.05)
		rospy.logerr("++++++++++++ After tucked")
		if result.error_code.val == MoveItErrorCodes.SUCCESS:
			success = True

	lgripper.command(gripper_closed)
	rgripper.command(gripper_closed)

	rospy.sleep(5)
