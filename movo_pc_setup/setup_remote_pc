#!/bin/bash

~/movo_ws/src/movo_common/si_utils/src/si_utils/setup_movo_pc_migration

if grep -q "MOVO REMOTE PC START" ~/.bashrc
then
    echo ".bashrc is already updated for movo remote"
else
    cat config/bash_rc_partial >> ~/.bashrc
fi

read -r -p "Do you want to setup only for simulation, in case you do not have a Movo Robot available? [y/n]" response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    source ~/.bashrc
    echo -e "\nScript has finished configuring the remote PC for simulation.\n\nPress any key to continue...\n"
    read -n 1 -s
    exit 1
fi

temp2=1
cnts=0
while [ $cnts -lt 10 ]; do
    echo -e "\nPlease connect to the robot Wifi network (MoovoWifi, password is Welcome00)\nand to the internet another interface\n\nPress any key to continue....\n"
    read -n 1 -s
    ping -q -c 1 -W 1 10.66.171.1 >/dev/null
    temp=$?
    ping -q -c 1 -W 1 10.66.171.2 >/dev/null
    temp1=$?
    ping -q -c 1 -W 1 8.8.8.8 >/dev/null
    temp2=$?
    cnts=$[$cnts+1]
    echo "$temp $temp1 $temp2"
    if [ $temp -eq 0 ] && [ $temp1 -eq 0 ] && [ $temp2 -eq 0 ]; then
      cnts=10
      echo "Success"
      break
    fi

    if [ $temp -ne 0 ]; then
      echo "Unable to ping movo2, no robot connection....trying again."
    fi
    if [ $temp1 -ne 0 ]; then
      echo "Unable to ping movo1, no robot connection....trying again."
    fi    
    if [ $temp2 -ne 0 ]; then
      echo "Unable to ping Google DNS, no internet connection....trying again."
    fi
done 

if [ $temp -ne 0 ] || [ $temp1 -ne 0 ]; then
  echo "Robot Connection timed out, try again....exiting"
  sleep 2
  exit 1
fi
if [ $temp2 -ne 0 ]; then
  echo "Internet Connection timed out, try again....exiting"
  sleep 2
  exit 1
fi

if grep -q "movo1" /etc/hosts
then
    echo "movo1 and movo2 are already defined in /etc/hosts"
else
    sudo sed -i "/127.0.1.1/a 10.66.171.2 movo1" /etc/hosts 
    sudo sed -i "/10.66.171.2 movo1/a 10.66.171.1 movo2" /etc/hosts
fi

if [ ! -f ~/.ssh/id_rsa.pub ]; then
    echo "Generating a new ssh key for the user..."
    read -r -p "Do you want to proceed? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        echo "Please press enter for each step,this will configure a default ssh key\nIf you decide to do something different than that its assumed you know what you're doing\n\nPress any key to continue......"
        read -n 1 -s    
        ssh-keygen -t rsa
    else
        exit 1
    fi
fi

echo "\nWould you like to initialize and build the local workspace?"
read -r -p "Build local workspace? [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    echo "\n Building local workspace. \n\n"
    cd ~/movo_ws/src
    catkin_init_workspace
    cd ~/movo_ws  
    catkin_make
    cd $MOVO_SETUP_DIR
fi

echo -e "\nScript has finished configuring the remote PC.\n\nWould you like to connect to the physical Movo robot now?"

read -r -p "Connect to the Movo [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    echo "Connecting to Movo......"
    sleep 1
else
    source ~/.bashrc
    echo -e "\nNot connecting to Movo robot.\n\nPress any key to exit....\n"
    read -n 1 -s
    exit 1
fi

temp=1
temp1=1
cnts=0
while [ $cnts -lt 10 ]; do
    echo -e "\nPlease connect to the robot's WiFi network (MovoWifi, password is Welcome00) \n\nPress any key to continue....\n"
    read -n 1 -s
    ping -q -c 1 -W 1 10.66.171.1 >/dev/null
    temp=$?
    ping -q -c 1 -W 1 10.66.171.2 >/dev/null
    temp1=$?
    cnts=$[$cnts+1]
    echo "$temp $temp1"
    if [ $temp -eq 0 ] && [ $temp1 -eq 0 ]; then
      cnts=10
      echo "Success"
      break
    fi

    if [ $temp -ne 0 ]; then
      echo "Unable to ping movo2, no robot connection....trying again."
    fi
    if [ $temp1 -ne 0 ]; then
      echo "Unable to ping movo1, no robot connection....trying again."
    fi
done 

if [ $temp -ne 0 ] || [ $temp1 -ne 0 ]; then
  echo "Robot Connection timed out, try again....exiting"
  sleep 2
  exit 1
fi

echo 'Connecting to movo1 (password is Welcome00)......Press any key to continue'
read -n 1 -s
ssh -oHostKeyAlgorithms='ssh-rsa' movo@movo1 "sleep 1; exit"
echo -e "Copying ssh key to movo1 (password is Welcome00)\n\nPress any key to continue...."
read -n 1 -s
ssh-copy-id movo@movo1
echo 'Connecting to movo2 (password is Welcome00)......Press any key to continue'
read -n 1 -s
ssh -oHostKeyAlgorithms='ssh-rsa' movo@movo2 "sleep 1; exit"
echo -e "Copying ssh key to movo2 (password is Welcome00)\n\nPress any key to continue...."
read -n 1 -s
ssh-copy-id movo@movo2

echo -e "\nDo you want to update the robot now?\nIf not the code from movo2 will overwrite the src directory....\n"
read -r -p "*PLEASE ANSWER NO UNLESS SPECIFICALLY INSTRUCTED BY KNOVA, or unless you are absolutely sure this is what you want to do.\n Install latest software on Movo now? [y/N]" response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    cd ~/movo_ws/src
    catkin_init_workspace
    cd ~/movo_ws  
    catkin_make
    cd $MOVO_SETUP_DIR
    echo "STOPPING THE ROBOT SERVICE AND UNINSTALLING IT.........."
    sleep 1
    ssh -t movo@movo2 "bash -ic +m 'cd ~; ./env.sh; movostop; rosrun movo_bringup uninstall_movo_core; rm -rf ~/movo_ws; mkdir -p ~/movo_ws/src;'"
    rsync -avzhe ssh --delete --exclude '*~' --progress /home/$USER/movo_ws/src movo@movo1:/home/movo/movo_ws/
    rsync -avzhe ssh --delete --exclude '*~' --progress /home/$USER/movo_ws/src movo@movo2:/home/movo/movo_ws/
    scp config/env.sh movo@movo1:/home/movo/
    scp config/env.sh movo@movo2:/home/movo/
    echo "RE-BUILDING WORKSPACE ON movo1"
    sleep 1        
    ssh -t movo@movo1 "bash -ic +m 'cd ~; ./env.sh; cd ~/movo_ws; catkin_make'"
    echo "RE-BUILDING WORKSPACE ON movo2"
    sleep 1
    ssh -t movo@movo2 "bash -ic +m 'cd ~; ./env.sh; cd ~/movo_ws; catkin_make'"
    echo "INSTALLING THE ROBOT SERVICE.........."
    ssh -t movo@movo2 "bash -ic +m 'cd ~; ./env.sh; rosrun movo_bringup install_movo_core'"
    echo -e "The robot needs to restart the servic.\nMovo will home the arms, make sure it is in a safe position.\nIf not answer N, power it off and restart it.\n\n"
    read -r -p "Do you want to restart the robot service now? [y/n]" response1
    if [[ "$response1" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        ssh -t movo@movo2 "bash -ic +m 'cd ~; ./env.sh; movostart'"
    else
        ssh -t movo@movo1 "bash -ic +m 'cd ~; ./env.sh; sudo shutdown -h now'"
        ssh -t movo@movo2 "bash -ic +m 'cd ~; ./env.sh; sudo shutdown -h now'"
        echo -e "\nPlease power the robot off, move it to a safe starting position and restart it\n\nPress any key to continue...\n"
        read -n 1 -s            
    fi
else
    rsync -avzhe ssh --delete --exclude '*~' --progress movo@movo2:/home/movo/movo_ws/src /home/$USER/movo_ws/
    cd ~/movo_ws/src
    rm -f CMakeLists.txt
    catkin_init_workspace
    cd ~/movo_ws  
    catkin_make
    cd $MOVO_SETUP_DIR
    yes | cp -rf config/network_config.bash /home/$USER/movo_ws/src/movo_network/movo_network_config.bash 
    
fi
source ~/.bashrc
echo -e "\nScript has finished updating the robot.\n\nPress any key to exit....\n"
read -n 1 -s
exit 1

